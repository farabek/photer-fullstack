import { render, screen } from '@testing-library/react';
import { ConditionalSidebarWrapper } from '@/app/ConditionalSidebarWrapper';

// Mock —Ö—É–∫–∞ useSidebarVisibility
jest.mock('@/shared/hooks/useSidebarVisibility', () => ({
  useSidebarVisibility: jest.fn(),
}));

// Mock –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Sidebar
jest.mock('@/widgets/side-bar', () => ({
  Sidebar: () => <div data-testid="sidebar">Mock Sidebar</div>,
}));

import { useSidebarVisibility } from '@/shared/hooks/useSidebarVisibility';

describe('üß™ ConditionalSidebarWrapper Component', () => {
  const mockUseSidebarVisibility = useSidebarVisibility as jest.MockedFunction<
    typeof useSidebarVisibility
  >;

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Sidebar', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å Sidebar –∫–æ–≥–¥–∞ showSidebar = true', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
      expect(screen.getByText('Mock Sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å Sidebar –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å Sidebar –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/profile',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å Sidebar –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/search',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });
  });

  describe('‚ùå –°–∫—Ä—ã—Ç–∏–µ Sidebar', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã–≤–∞—Ç—å Sidebar –∫–æ–≥–¥–∞ showSidebar = false', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: false,
        isAuthPage: true,
        pathname: '/sign-in',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
      expect(screen.queryByText('Mock Sidebar')).not.toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã–≤–∞—Ç—å Sidebar –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: false,
        isAuthPage: true,
        pathname: '/sign-in',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã–≤–∞—Ç—å Sidebar –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: false,
        isAuthPage: true,
        pathname: '/sign-up',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã–≤–∞—Ç—å Sidebar –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: false,
        isAuthPage: true,
        pathname: '/forgot-password',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
    });
  });

  describe('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏', () => {
    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏ (isClient = false)', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        isAuthPage: false,
        pathname: '/',
        isClient: false,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏ (isClient = true)', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });
  });

  describe('üéØ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏', () => {
    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å undefined pathname', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        isAuthPage: false,
        pathname: undefined as any,
        isClient: false,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–π pathname', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        isAuthPage: false,
        pathname: '',
        isClient: false,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å null pathname', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        isAuthPage: false,
        pathname: null as any,
        isClient: false,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });
  });

  describe('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤', () => {
    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/profile/123/post/456',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/search?q=test&category=photos',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.getByTestId('sidebar')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: false,
        isAuthPage: true,
        pathname: '/sign-in?redirect=/profile&utm_source=google',
        isClient: true,
      });

      render(<ConditionalSidebarWrapper />);

      expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
    });
  });

  describe('üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', () => {
    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
      mockUseSidebarVisibility.mockReturnValue({
        showSidebar: true,
        isAuthPage: false,
        pathname: '/',
        isClient: true,
      });

      expect(() => {
        render(<ConditionalSidebarWrapper />);
      }).not.toThrow();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ö—É–∫–∞', () => {
      const testCases = [
        { showSidebar: true, isAuthPage: false, pathname: '/', isClient: true },
        {
          showSidebar: false,
          isAuthPage: true,
          pathname: '/sign-in',
          isClient: true,
        },
        {
          showSidebar: true,
          isAuthPage: false,
          pathname: '/profile',
          isClient: true,
        },
        {
          showSidebar: false,
          isAuthPage: true,
          pathname: '/sign-up',
          isClient: true,
        },
      ];

      testCases.forEach((testCase) => {
        mockUseSidebarVisibility.mockReturnValue(testCase);

        const { unmount } = render(<ConditionalSidebarWrapper />);

        if (testCase.showSidebar) {
          expect(screen.getByTestId('sidebar')).toBeInTheDocument();
        } else {
          expect(screen.queryByTestId('sidebar')).not.toBeInTheDocument();
        }

        unmount();
      });
    });
  });
});
