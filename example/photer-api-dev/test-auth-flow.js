const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAuthFlow(email, password) {
  try {
    console.log(`üß™ Testing authentication flow for: ${email}`);
    console.log('‚îÄ'.repeat(60));

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã STEP 1: Checking current user status');
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        username: true,
        email: true,
        emailConfirmed: true,
        confirmationCode: true,
        confirmationExpires: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    if (!user) {
      console.log('‚ùå User not found!');
      return;
    }

    console.log(`üë§ User: ${user.username} (${user.email})`);
    console.log(`üÜî ID: ${user.id}`);
    console.log(`‚úÖ Email Confirmed: ${user.emailConfirmed ? 'Yes' : 'No'}`);
    console.log(`üîë Confirmation Code: ${user.confirmationCode || 'None'}`);
    console.log(
      `‚è∞ Confirmation Expires: ${user.confirmationExpires || 'None'}`,
    );

    if (user.confirmationExpires) {
      const isExpired = new Date() > user.confirmationExpires;
      console.log(`‚è∞ Code Expired: ${isExpired ? 'Yes' : 'No'}`);
    }

    // –®–∞–≥ 2: –ï—Å–ª–∏ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if (!user.emailConfirmed && user.confirmationCode) {
      console.log(
        '\nüìã STEP 2: Email not confirmed, checking confirmation code',
      );

      if (user.confirmationExpires && new Date() > user.confirmationExpires) {
        console.log('‚ùå Confirmation code has expired!');
        console.log(
          'üí° Solution: User needs to request a new confirmation code',
        );
        return;
      }

      console.log('‚úÖ Confirmation code is still valid');
      console.log(
        `üí° Solution: User should use code: ${user.confirmationCode}`,
      );

      // –®–∞–≥ 3: –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
      console.log('\nüìã STEP 3: Simulating email confirmation');
      console.log('üîÑ Updating user emailConfirmed to true...');

      await prisma.user.update({
        where: { id: user.id },
        data: {
          emailConfirmed: true,
          confirmationCode: null,
          confirmationExpires: null,
        },
      });

      console.log('‚úÖ Email confirmed successfully!');

      // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('\nüìã STEP 4: Verifying confirmation result');
      const updatedUser = await prisma.user.findUnique({
        where: { email },
        select: {
          emailConfirmed: true,
          confirmationCode: true,
          confirmationExpires: true,
          updatedAt: true,
        },
      });

      console.log(
        `‚úÖ Email Confirmed: ${updatedUser.emailConfirmed ? 'Yes' : 'No'}`,
      );
      console.log(
        `üîë Confirmation Code: ${updatedUser.confirmationCode || 'None'}`,
      );
      console.log(
        `‚è∞ Confirmation Expires: ${updatedUser.confirmationExpires || 'None'}`,
      );
      console.log(`üìÖ Updated At: ${updatedUser.updatedAt}`);

      if (updatedUser.emailConfirmed) {
        console.log('\nüéâ SUCCESS: User can now log in!');
        console.log('üí° Next step: Try logging in with email and password');
      }
    } else if (user.emailConfirmed) {
      console.log('\n‚úÖ User email is already confirmed!');
      console.log('üí° User should be able to log in');
    } else {
      console.log('\n‚ùå User has no confirmation code');
      console.log(
        'üí° Solution: User needs to register again or request confirmation code',
      );
    }
  } catch (error) {
    console.error('‚ùå Error in testAuthFlow:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];
const password = process.argv[3];

if (!email) {
  console.log('‚ùå Please provide an email address');
  console.log('Usage: node test-auth-flow.js <email> [password]');
  console.log(
    'Example: node test-auth-flow.js farhodmuhamadiev4@gmail.com mypassword',
  );
  process.exit(1);
}

testAuthFlow(email, password);
