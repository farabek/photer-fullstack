const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function confirmUserEmail(email) {
  try {
    console.log(`üîç Looking for user with email: ${email}`);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        username: true,
        email: true,
        emailConfirmed: true,
        confirmationCode: true,
        confirmationExpires: true,
      },
    });

    if (!user) {
      console.log('‚ùå User not found');
      return;
    }

    console.log(`üë§ Found user: ${user.username}`);
    console.log(
      `   Email Confirmed: ${user.emailConfirmed ? '‚úÖ Yes' : '‚ùå No'}`,
    );

    if (user.emailConfirmed) {
      console.log('‚úÖ User email is already confirmed');
      return;
    }

    if (!user.confirmationCode) {
      console.log('‚ùå No confirmation code found');
      return;
    }

    if (user.confirmationExpires && new Date() > user.confirmationExpires) {
      console.log('‚ùå Confirmation code has expired');
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
    await prisma.user.update({
      where: { id: user.id },
      data: {
        emailConfirmed: true,
        confirmationCode: null,
        confirmationExpires: null,
      },
    });

    console.log('‚úÖ User email confirmed successfully!');
    console.log(`   User ${user.username} can now log in`);
  } catch (error) {
    console.error('‚ùå Error confirming user email:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];

if (!email) {
  console.log('‚ùå Please provide an email address');
  console.log('Usage: node confirm-user-email.js <email>');
  process.exit(1);
}

confirmUserEmail(email);
