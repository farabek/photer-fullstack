const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function monitorUser(email) {
  try {
    console.log(`üîç Monitoring user: ${email}`);
    console.log(`‚è∞ Started at: ${new Date()}`);
    console.log('‚îÄ'.repeat(50));

    let lastStatus = null;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const checkUser = async () => {
      try {
        const user = await prisma.user.findUnique({
          where: { email },
          select: {
            id: true,
            username: true,
            email: true,
            emailConfirmed: true,
            confirmationCode: true,
            confirmationExpires: true,
            createdAt: true,
            updatedAt: true,
          },
        });

        if (!user) {
          console.log(`‚ùå User not found: ${email}`);
          return;
        }

        const currentStatus = {
          emailConfirmed: user.emailConfirmed,
          hasConfirmationCode: !!user.confirmationCode,
          confirmationExpired: user.confirmationExpires
            ? new Date() > user.confirmationExpires
            : false,
          timestamp: new Date(),
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
        if (
          !lastStatus ||
          JSON.stringify(currentStatus) !== JSON.stringify(lastStatus)
        ) {
          console.log(
            `\nüîÑ Status changed at ${new Date().toLocaleTimeString()}:`,
          );
          console.log(`üë§ User: ${user.username} (${user.email})`);
          console.log(`üÜî ID: ${user.id}`);
          console.log(
            `‚úÖ Email Confirmed: ${user.emailConfirmed ? 'Yes' : 'No'}`,
          );
          console.log(
            `üîë Confirmation Code: ${user.confirmationCode || 'None'}`,
          );
          console.log(
            `‚è∞ Confirmation Expires: ${user.confirmationExpires || 'None'}`,
          );
          console.log(
            `‚è∞ Code Expired: ${currentStatus.confirmationExpired ? 'Yes' : 'No'}`,
          );
          console.log(`üìÖ Created: ${user.createdAt}`);
          console.log(`üìÖ Updated: ${user.updatedAt}`);

          if (user.emailConfirmed) {
            console.log(`üéâ SUCCESS: User email is now confirmed!`);
          } else if (currentStatus.confirmationExpired) {
            console.log(`‚ö†Ô∏è WARNING: Confirmation code has expired!`);
          } else if (user.confirmationCode) {
            console.log(
              `‚è≥ WAITING: User needs to confirm email with code: ${user.confirmationCode}`,
            );
          }

          lastStatus = currentStatus;
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
          const now = new Date();
          if (!lastStatus || now - lastStatus.timestamp > 10000) {
            console.log(
              `\n‚è∞ Status check at ${now.toLocaleTimeString()}: Email confirmed: ${user.emailConfirmed ? 'Yes' : 'No'}`,
            );
            lastStatus = currentStatus;
          }
        }
      } catch (error) {
        console.error(`‚ùå Error checking user:`, error);
      }
    };

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await checkUser();

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkUser, 2000);

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(
      () => {
        clearInterval(interval);
        console.log('\n‚è∞ Monitoring stopped after 5 minutes');
        process.exit(0);
      },
      5 * 60 * 1000,
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    process.on('SIGINT', () => {
      clearInterval(interval);
      console.log('\n‚è∞ Monitoring stopped by user');
      process.exit(0);
    });
  } catch (error) {
    console.error('‚ùå Error in monitorUser:', error);
  } finally {
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º
  }
}

// –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];

if (!email) {
  console.log('‚ùå Please provide an email address');
  console.log('Usage: node monitor-user.js <email>');
  console.log('Example: node monitor-user.js farhodmuhamadiev4@gmail.com');
  process.exit(1);
}

monitorUser(email);
