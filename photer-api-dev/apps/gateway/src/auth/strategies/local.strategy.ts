import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from '../auth.service';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super({ usernameField: 'email' });
  }

  async validate(email: string, password: string): Promise<any> {
    console.log(`üîç LocalStrategy.validate called for email: ${email}`);

    try {
      console.log(`üîÑ Calling authService.validateUser...`);
      const user = await this.authService.validateUser(email, password);
      console.log(`üë§ User returned from validateUser: ${user ? 'Yes' : 'No'}`);

      if (!user) {
        console.log(`‚ùå No user returned, throwing UnauthorizedException`);
        throw new UnauthorizedException({
          message: 'Invalid email or password',
        });
      }

      console.log(
        `‚úÖ User validation successful, returning user: ${user.username}`,
      );
      return user;
    } catch (error) {
      console.log(`‚ùå Error in LocalStrategy.validate:`, error);

      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ UnauthorizedException —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (error instanceof UnauthorizedException) {
        console.log(
          `üîÑ Re-throwing UnauthorizedException with message: ${error.message}`,
        );
        throw error;
      }

      // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log(`üîÑ Creating generic UnauthorizedException`);
      throw new UnauthorizedException({
        message: 'Authentication failed',
      });
    }
  }
}
