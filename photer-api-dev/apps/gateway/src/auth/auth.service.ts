import {
  Injectable,
  UnauthorizedException,
  BadRequestException,
  ConflictException,
  Logger,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import { EmailService } from './email.service';
import * as bcrypt from 'bcrypt';
import { RegistrationDto } from './dto/registration.dto';
import { v4 as uuidv4 } from 'uuid';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 *
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è:
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
 * - –í—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
 * - OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);

  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private emailService: EmailService,
  ) {}

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç TTL –≤–∏–¥–∞ '120000', '60s', '2m', '1h', '7d' –≤ —Å–µ–∫—É–Ω–¥—ã –¥–ª—è jwt "expiresIn"
  private parseTtlToSeconds(
    value: string | undefined,
    defaultValue: string,
  ): number | string {
    const src = (value || defaultValue).toString().trim();
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã, –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å ‚Äî jsonwebtoken –ø–æ–Ω–∏–º–∞–µ—Ç
    if (/^\d+(ms|s|m|h|d)$/i.test(src)) return src.toLowerCase();
    // –ò–Ω–∞—á–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã/—Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å–µ–∫.
    const match = src.match(/^(\d+)$/);
    if (match) {
      const num = Number(match[1]);
      // –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã (–±–æ–ª—å—à–µ —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤ —Å–µ–∫
      if (num > 24 * 60 * 60) {
        return Math.floor(num / 1000);
      }
      return num; // —Å—á–∏—Ç–∞–µ–º —Å–µ–∫—É–Ω–¥–∞–º–∏
    }
    // –§–æ–ª–±—ç–∫: 5 –º–∏–Ω—É—Ç
    return '5m';
  }

  async validateUser(email: string, password: string): Promise<any> {
    this.logger.log(`üîç validateUser called for email: ${email}`);

    const user = await this.usersService.findByEmail(email);
    this.logger.log(`üë§ User found: ${user ? 'Yes' : 'No'}`);

    if (user) {
      this.logger.log(`üìß User email: ${user.email}`);
      this.logger.log(`‚úÖ Email confirmed: ${user.emailConfirmed}`);
      this.logger.log(`üÜî User ID: ${user.id}`);
      this.logger.log(`üë§ Username: ${user.username}`);

      const passwordMatch = await bcrypt.compare(password, user.password);
      this.logger.log(`üîê Password match: ${passwordMatch}`);

      if (passwordMatch) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email
        if (!user.emailConfirmed) {
          this.logger.warn(`‚ùå Email not confirmed for user: ${email}`);
          throw new UnauthorizedException({
            message:
              'Email not confirmed. Please check your email and confirm your account.',
          });
        }

        this.logger.log(`‚úÖ User validation successful for: ${email}`);
        const { password, ...result } = user;
        return result;
      } else {
        this.logger.warn(`‚ùå Password mismatch for user: ${email}`);
      }
    } else {
      this.logger.warn(`‚ùå User not found for email: ${email}`);
    }

    return null;
  }

  async login(user: any) {
    const payload = { email: user.email, sub: user.id };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access token (—Å–µ–∫—Ä–µ—Ç: JWT_SECRET)
    const accessToken = this.jwtService.sign(payload, {
      secret: process.env.JWT_SECRET,
      expiresIn: this.parseTtlToSeconds(
        process.env.JWT_ACCESS_EXPIRATION_TIME,
        '5m',
      ),
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh token (—Å–µ–∫—Ä–µ—Ç: JWT_REFRESH_SECRET || JWT_SECRET)
    const refreshToken = this.jwtService.sign(payload, {
      secret: process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET,
      expiresIn: this.parseTtlToSeconds(
        process.env.JWT_REFRESH_EXPIRATION_TIME,
        '7d',
      ),
    });

    return {
      accessToken,
      refreshToken,
      user: {
        id: user.id,
        email: user.email,
        username: user.username,
      },
    };
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *
   * –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç:
   * 1. –ü—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –∏ username
   * 2. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   * 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   * 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * 5. –û—Ç–ø—Ä–∞–≤–∫—É email —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   *
   * @param registrationDto - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns null (204 No Content)
   * @throws ConflictException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  async registration(registrationDto: RegistrationDto) {
    const { username, email, password } = registrationDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUserByEmail = await this.usersService.findByEmail(email);
    if (existingUserByEmail) {
      throw new ConflictException({
        errorsMessages: [
          {
            message: 'User with such credentials already exists',
            field: 'email',
          },
        ],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
    const existingUserByUsername =
      await this.usersService.findByUsername(username);
    if (existingUserByUsername) {
      throw new ConflictException({
        errorsMessages: [
          {
            message: 'User with such credentials already exists',
            field: 'username',
          },
        ],
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (UUID v4)
    const confirmationCode = uuidv4();
    // –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
    const confirmationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);

    // üîç –û–¢–õ–ê–î–û–ß–ù–´–ï –õ–û–ì–ò
    this.logger.log(
      `üîë Generated confirmation code for ${email}: ${confirmationCode}`,
    );
    this.logger.log(
      `‚è∞ Confirmation expires at: ${confirmationExpires.toISOString()}`,
    );

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    // –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω –≤ UsersService.create()
    await this.usersService.create({
      username,
      email,
      password: password, // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      confirmationCode,
      confirmationExpires,
      emailConfirmed: false,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try {
      const emailSent = await this.emailService.sendRegistrationConfirmation(
        email,
        username,
        confirmationCode,
      );

      if (emailSent) {
        this.logger.log(`Registration confirmation email sent to ${email}`);
      } else {
        this.logger.warn(
          `Failed to send registration confirmation email to ${email}`,
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log(`Confirmation code for ${email}: ${confirmationCode}`);
      }
    } catch (error) {
      this.logger.error(
        `Error sending registration confirmation email to ${email}:`,
        error,
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      console.log(`Confirmation code for ${email}: ${confirmationCode}`);
    }

    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É
   *
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   *
   * @param code - –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ email
   * @returns null (204 No Content)
   * @throws BadRequestException –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
   */
  async registrationConfirmation(code: string) {
    this.logger.log(`üîç registrationConfirmation called with code: ${code}`);
    this.logger.log(`üîç Code length: ${code.length}`);
    this.logger.log(`üîç Code type: ${typeof code}`);
    this.logger.log(`üîç Code trimmed: "${code.trim()}"`);

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user = await this.usersService.findByConfirmationCode(code);
    this.logger.log(
      `üë§ User found by confirmation code: ${user ? 'Yes' : 'No'}`,
    );

    if (user) {
      this.logger.log(
        `üë§ User confirmation code in DB: ${user.confirmationCode}`,
      );
      this.logger.log(`üîç Codes match: ${user.confirmationCode === code}`);
    }

    if (!user) {
      this.logger.warn(`‚ùå No user found for confirmation code: ${code}`);
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'UUID not correct',
            field: 'code',
          },
        ],
      });
    }

    this.logger.log(`üë§ Found user: ${user.username} (${user.email})`);
    this.logger.log(
      `‚úÖ Current email confirmed status: ${user.emailConfirmed}`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ email
    if (user.emailConfirmed) {
      this.logger.warn(`‚ö†Ô∏è Email already confirmed for user: ${user.email}`);
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'Email already confirmed',
            field: 'code',
          },
        ],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (user.confirmationExpires < new Date()) {
      this.logger.warn(`‚ùå Confirmation code expired for user: ${user.email}`);
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'Confirmation code expired',
            field: 'code',
          },
        ],
      });
    }

    this.logger.log(
      `‚è∞ Confirmation code expires: ${user.confirmationExpires}`,
    );
    this.logger.log(`‚è∞ Current time: ${new Date()}`);
    this.logger.log(`‚úÖ Code is still valid`);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.logger.log(`üîÑ Confirming email for user: ${user.email}`);
    await this.usersService.confirmEmail(user.id);
    this.logger.log(`‚úÖ Email confirmed successfully for user: ${user.email}`);

    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   *
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email
   * –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.
   *
   * @param email - email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns null (204 No Content)
   * @throws BadRequestException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
   */
  async registrationEmailResending(email: string) {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await this.usersService.findByEmail(email);

    if (!user) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'User not found',
            field: 'email',
          },
        ],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ email
    if (user.emailConfirmed) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'Email already confirmed',
            field: 'email',
          },
        ],
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmationCode = uuidv4();
    const confirmationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.usersService.updateConfirmationCode(
      user.id,
      confirmationCode,
      confirmationExpires,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π email —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try {
      const emailSent = await this.emailService.sendRegistrationConfirmation(
        email,
        user.username,
        confirmationCode,
      );

      if (emailSent) {
        this.logger.log(`New registration confirmation email sent to ${email}`);
      } else {
        this.logger.warn(
          `Failed to send new registration confirmation email to ${email}`,
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        console.log(`New confirmation code for ${email}: ${confirmationCode}`);
      }
    } catch (error) {
      this.logger.error(
        `Error sending new registration confirmation email to ${email}:`,
        error,
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      console.log(`New confirmation code for ${email}: ${confirmationCode}`);
    }

    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 204 No Content —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
  }

  async validateOAuthUser(profile: any, provider: string) {
    let user = await this.usersService.findByEmail(profile.email);

    if (!user) {
      user = await this.usersService.create({
        email: profile.email,
        username: profile.displayName || profile.username,
        password: '', // OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ø–∞—Ä–æ–ª—è
        oauthProvider: provider,
        oauthId: profile.id,
        emailConfirmed: true, // OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
      });
    }

    return this.login(user);
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   *
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email.
   * –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É reCAPTCHA –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞.
   *
   * @param email - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param recaptchaValue - –∑–Ω–∞—á–µ–Ω–∏–µ reCAPTCHA
   * @returns null (204 No Content)
   * @throws BadRequestException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è CAPTCHA
   */
  async passwordRecovery(email: string, recaptchaValue: string) {
    // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å reCAPTCHA
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!recaptchaValue || recaptchaValue.trim().length === 0) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'Incorrect captcha',
            field: 'Captcha',
          },
        ],
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await this.usersService.findByEmail(email);

    if (!user) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'User not found',
            field: 'email',
          },
        ],
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const recoveryCode = uuidv4();
    const recoveryExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.usersService.setRecoveryCode(
      user.id,
      recoveryCode,
      recoveryExpires,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
      const emailSent = await this.emailService.sendPasswordRecovery(
        email,
        user.username,
        recoveryCode,
      );

      if (emailSent) {
        this.logger.log(`Password recovery email sent to ${email}`);
      } else {
        this.logger.warn(`Failed to send password recovery email to ${email}`);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        console.log(`Password recovery code for ${email}: ${recoveryCode}`);
      }
    } catch (error) {
      this.logger.error(
        `Error sending password recovery email to ${email}:`,
        error,
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      console.log(`Password recovery code for ${email}: ${recoveryCode}`);
    }

    return null; // 204 No Content
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
   *
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏—Å—Ç–µ–∫
   * –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª email.
   *
   * @param email - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns null (204 No Content)
   * @throws BadRequestException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async passwordRecoveryResending(email: string) {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await this.usersService.findByEmail(email);

    if (!user) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'User not found',
            field: 'email',
          },
        ],
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const recoveryCode = uuidv4();
    const recoveryExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.usersService.setRecoveryCode(
      user.id,
      recoveryCode,
      recoveryExpires,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π email —Å –∫–æ–¥–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
      const emailSent = await this.emailService.sendPasswordRecovery(
        email,
        user.username,
        recoveryCode,
      );

      if (emailSent) {
        this.logger.log(`New password recovery email sent to ${email}`);
      } else {
        this.logger.warn(
          `Failed to send new password recovery email to ${email}`,
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        console.log(`New password recovery code for ${email}: ${recoveryCode}`);
      }
    } catch (error) {
      this.logger.error(
        `Error sending new password recovery email to ${email}:`,
        error,
      );
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      console.log(`New password recovery code for ${email}: ${recoveryCode}`);
    }

    return null; // 204 No Content
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
   *
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.
   *
   * @param newPassword - –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
   * @param recoveryCode - –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ email
   * @returns null (204 No Content)
   * @throws BadRequestException –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
   */
  async setNewPassword(newPassword: string, recoveryCode: string) {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const user = await this.usersService.findByRecoveryCode(recoveryCode);

    if (!user) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'UUID not correct',
            field: 'recoveryCode',
          },
        ],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (user.recoveryExpires < new Date()) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'Recovery code expired',
            field: 'recoveryCode',
          },
        ],
      });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏ –æ—á–∏—â–∞–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.usersService.updatePassword(user.id, hashedPassword);

    return null; // 204 No Content
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   *
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ JWT —Ç–æ–∫–µ–Ω—É.
   *
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
   * @returns –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @throws BadRequestException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async getCurrentUser(userId: string) {
    const user = await this.usersService.findOne(userId);

    if (!user) {
      throw new BadRequestException({
        errorsMessages: [
          {
            message: 'User not found',
            field: 'userId',
          },
        ],
      });
    }

    return {
      userId: user.id,
      email: user.email,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞
   *
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç refresh —Ç–æ–∫–µ–Ω –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤.
   *
   * @param refreshToken - refresh —Ç–æ–∫–µ–Ω –∏–∑ cookie
   * @returns –Ω–æ–≤—ã–µ access –∏ refresh —Ç–æ–∫–µ–Ω—ã
   * @throws UnauthorizedException –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
   */
  async refreshTokens(refreshToken: string) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
      const payload = this.jwtService.verify(refreshToken, {
        secret: process.env.JWT_REFRESH_SECRET || process.env.JWT_SECRET,
      });

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.usersService.findOne(payload.sub);
      if (!user) {
        throw new UnauthorizedException('User not found');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (—Å–∫–æ–ª—å–∑—è—â–∞—è —Å–µ—Å—Å–∏—è)
      return this.login(user);
    } catch (error) {
      throw new UnauthorizedException('Invalid refresh token');
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   *
   * –ê–Ω–Ω—É–ª–∏—Ä—É–µ—Ç refresh —Ç–æ–∫–µ–Ω (–≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ
   * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204, —Ç–æ–∫–µ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ).
   *
   * @returns null (204 No Content)
   */
  async logout() {
    // –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 204
    // –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    // –í production –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å blacklist –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    return null; // 204 No Content
  }
}
