import {
  Injectable,
  NotFoundException,
  ForbiddenException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreatePostDto } from './dto/create-post.dto';
import { UpdatePostDto } from './dto/update-post.dto';
import { PostOutputDto, PostOwnerOutputDto } from './dto/post-output.dto';
import { CommentOutputDto } from './dto/comment-output.dto';
// –£–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø Post, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
import { User, Profile } from '@prisma/client';

@Injectable()
export class PostsService {
  constructor(private readonly prisma: PrismaService) {}

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
   */
  async addComment(postId: string, text: string, userId: string) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!text || text.trim().length === 0) {
      throw new Error('Comment text cannot be empty');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    const post = await this.prisma.photo.findUnique({
      where: { id: postId },
    });

    if (!post) {
      throw new NotFoundException('Post not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: { profile: true },
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    console.log('üí¨ Adding comment:', { postId, text: text.trim(), userId });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const comment = await this.prisma.comment.create({
      data: {
        text: text.trim(),
        userId: userId,
        photoId: postId,
      },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const commentResponse = {
      id: comment.id,
      text: comment.text,
      createdAt: comment.createdAt.toISOString(),
      owner: {
        userName: user.username,
        avatarUrl: user.profile?.avatarUrl?.[0] || null,
      },
    };

    console.log('‚úÖ Comment added successfully:', commentResponse);

    return commentResponse;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
   */
  async getPostComments(postId: string): Promise<CommentOutputDto[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    const post = await this.prisma.photo.findUnique({
      where: { id: postId },
    });

    if (!post) {
      throw new NotFoundException('Post not found');
    }

    console.log('üìù Getting comments for post:', postId);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const comments = await this.prisma.comment.findMany({
      where: { photoId: postId },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
      orderBy: { createdAt: 'asc' }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const formattedComments: CommentOutputDto[] = comments.map((comment) => ({
      id: comment.id,
      text: comment.text,
      createdAt: comment.createdAt.toISOString(),
      owner: {
        userName: comment.user.username,
        avatarUrl: comment.user.profile?.avatarUrl?.[0] || null,
      },
    }));

    console.log(
      `‚úÖ Found ${formattedComments.length} comments for post ${postId}`,
    );

    return formattedComments;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç
   */
  async createPost(
    createPostDto: CreatePostDto,
    userId: string,
    photoUrls: string[],
  ): Promise<PostOutputDto> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è owner –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: { profile: true },
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    console.log('üîÑ Creating post with:', {
      description: createPostDto.description,
      tags: createPostDto.tags,
      photoUrls,
      userId,
    });

    const post = await this.prisma.photo.create({
      data: {
        title: 'Post', // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        description: createPostDto.description || null,
        url: photoUrls.join(','), // –°–æ—Ö—Ä–∞–Ω—è–µ–º URLs —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        tags: createPostDto.tags?.join(',') || null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        userId,
      },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    return this.mapToPostOutputDto(post);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getAllPosts(
    pageNumber: number = 1,
    pageSize: number = 8,
    sortDirection: 'asc' | 'desc' = 'desc',
    sortBy: string = 'createdAt',
  ): Promise<{
    items: PostOutputDto[];
    totalCount: number;
    pagesCount: number;
    page: number;
    pageSize: number;
  }> {
    const skip = (pageNumber - 1) * pageSize;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
    const totalCount = await this.prisma.photo.count();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const posts = await this.prisma.photo.findMany({
      skip,
      take: pageSize,
      orderBy: {
        [sortBy]: sortDirection,
      },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    const items = posts.map((post) => this.mapToPostOutputDto(post));
    const pagesCount = Math.ceil(totalCount / pageSize);

    return {
      items,
      totalCount,
      pagesCount,
      page: pageNumber,
      pageSize,
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç –ø–æ ID
   */
  async getPostById(id: string): Promise<PostOutputDto> {
    const post = await this.prisma.photo.findUnique({
      where: { id },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    if (!post) {
      throw new NotFoundException('Post not found');
    }

    return this.mapToPostOutputDto(post);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç
   */
  async updatePost(
    id: string,
    updatePostDto: UpdatePostDto,
    userId: string,
  ): Promise<PostOutputDto> {
    const post = await this.prisma.photo.findUnique({
      where: { id },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    if (!post) {
      throw new NotFoundException('Post not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–π –ø–æ—Å—Ç
    if (post.userId !== userId) {
      throw new ForbiddenException('You can only update your own posts');
    }

    const updatedPost = await this.prisma.photo.update({
      where: { id },
      data: {
        description: updatePostDto.description,
      },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    return this.mapToPostOutputDto(updatedPost);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç
   */
  async deletePost(id: string, userId: string): Promise<void> {
    const post = await this.prisma.photo.findUnique({
      where: { id },
    });

    if (!post) {
      throw new NotFoundException('Post not found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π –ø–æ—Å—Ç
    if (post.userId !== userId) {
      throw new ForbiddenException('You can only delete your own posts');
    }

    await this.prisma.photo.delete({
      where: { id },
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId –∏–ª–∏ username
   */
  async getUserPosts(
    userIdentifier: string,
    pageNumber: number = 1,
    pageSize: number = 8,
    sortDirection: 'asc' | 'desc' = 'desc',
    sortBy: string = 'createdAt',
  ): Promise<{
    items: PostOutputDto[];
    totalCount: number;
    pagesCount: number;
    page: number;
    pageSize: number;
  }> {
    console.log('PostsService.getUserPosts called with:', {
      userIdentifier,
      pageNumber,
      pageSize,
      sortDirection,
      sortBy,
    });

    let userId: string | null = null;

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –ø–æ userIdentifier –∫–∞–∫ userId
    console.log('Trying to find user by id:', userIdentifier);
    const userById = await this.prisma.user.findUnique({
      where: { id: userIdentifier },
      select: { id: true },
    });

    if (userById) {
      userId = userById.id;
      console.log('Found user by id:', userId);
    } else {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ id, –∏—â–µ–º –ø–æ username —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
      console.log(
        'User not found by id, trying to find by username:',
        userIdentifier,
      );
      const profile = await this.prisma.profile.findUnique({
        where: { username: userIdentifier },
        select: { userId: true },
      });

      if (profile) {
        userId = profile.userId;
        console.log('Found userId:', userId, 'for username:', userIdentifier);
      } else {
        console.log('Profile not found for username:', userIdentifier);
        return {
          items: [],
          totalCount: 0,
          pagesCount: 0,
          page: pageNumber,
          pageSize,
        };
      }
    }

    const skip = (pageNumber - 1) * pageSize;

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const totalCount = await this.prisma.photo.count({
      where: { userId },
    });

    console.log('Total posts count for userId:', userId, 'is:', totalCount);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const posts = await this.prisma.photo.findMany({
      where: { userId },
      skip,
      take: pageSize,
      orderBy: {
        [sortBy]: sortDirection,
      },
      include: {
        user: {
          include: {
            profile: true,
          },
        },
      },
    });

    console.log('Found posts for userId:', userId, 'count:', posts.length);
    if (posts.length > 0) {
      console.log('First post user info:', {
        userId: posts[0].user.id,
        username: posts[0].user.username,
        hasProfile: !!posts[0].user.profile,
      });
    }

    const items = posts.map((post) => this.mapToPostOutputDto(post));
    const pagesCount = Math.ceil(totalCount / pageSize);

    console.log('Returning posts result:', {
      itemsCount: items.length,
      totalCount,
      pagesCount,
      page: pageNumber,
      pageSize,
    });

    return {
      items,
      totalCount,
      pagesCount,
      page: pageNumber,
      pageSize,
    };
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Prisma –≤ PostOutputDto
   */
  private mapToPostOutputDto(post: any): PostOutputDto {
    // –†–∞–∑–±–∏—Ä–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ö—Ä–∞–Ω—è—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    const photos = post.url ? post.url.split(',').filter(Boolean) : [];

    // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ (—Ö—Ä–∞–Ω—è—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    const tags = post.tags ? post.tags.split(',').filter(Boolean) : [];

    console.log('mapToPostOutputDto:', {
      postId: post.id,
      rawUrl: post.url,
      photosCount: photos.length,
      photos,
      tags,
    });

    // –°–æ–∑–¥–∞–µ–º owner –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const owner: PostOwnerOutputDto = {
      userId: post.user.id,
      userName: post.user.profile?.username || post.user.username,
      firstName: post.user.profile?.firstName || null,
      lastName: post.user.profile?.lastName || null,
      avatarUrl: post.user.profile?.avatarUrl?.[0] || null,
    };

    return {
      id: post.id,
      description: post.description,
      tags,
      photos,
      owner,
      status: true, // –í—Å–µ –ø–æ—Å—Ç—ã –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createdAt: post.createdAt.toISOString(),
      updatedAt: post.updatedAt.toISOString(),
    };
  }
}
