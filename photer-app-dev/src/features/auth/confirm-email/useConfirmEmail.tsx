'use client';

import { useState } from 'react';
import { useConfirmEmailMutation } from '../api/authApi';

export function useConfirmEmail() {
  const [confirmEmail, { isLoading }] = useConfirmEmailMutation();
  const [error, setError] = useState<string>('');

  const handleConfirmEmail = async (code: string): Promise<boolean> => {
    try {
      setError('');
      console.log('üîç Frontend: Attempting to confirm email with code:', code);
      console.log('üîç Frontend: Code length:', code.length);
      console.log('üîç Frontend: Code trimmed:', code.trim());

      await confirmEmail({ code }).unwrap();
      console.log('‚úÖ Frontend: Email confirmation successful');
      return true;
    } catch (err: any) {
      console.error('‚ùå Frontend: Email confirmation error:', err);

      if (err?.data?.errorsMessages?.[0]?.message) {
        const message = err.data.errorsMessages[0].message;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
        switch (message) {
          case 'UUID not correct':
            setError(
              '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.'
            );
            break;
          case 'Email already confirmed':
            setError('Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
            break;
          case 'Confirmation code expired':
            setError('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
            break;
          default:
            setError(message);
        }
      } else if (err?.status === 400) {
        setError(
          '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
        );
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      return false;
    }
  };

  return {
    confirmEmail: handleConfirmEmail,
    isLoading,
    error,
  };
}
