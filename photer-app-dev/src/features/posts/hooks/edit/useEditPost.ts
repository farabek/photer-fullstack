import { RefObject, useCallback, useEffect, useRef, useState } from 'react';
import { PostType } from '../../lib/post.types';
import { useUpdatePostMutation } from '../../api/postsApi';
import { useSelector } from 'react-redux';
import { RootState } from '@/shared/state/store';
import { authApi } from '@/features/auth/api/authApi';

type PropsHookEditPost = {
  onCloseAction: () => void;
  MAX_SYMBOL_COUNT: number;
  post: PostType;
};

type HookEditPost = {
  description: string;
  openConfirmClose: boolean;
  editPostRef: RefObject<HTMLDivElement | null>;
  isUpdating: boolean;
  handleChange: (text: string) => void;
  setOpenConfirmClose: (value: boolean) => void;
  confirmChange: () => void;
  handleAccept: () => void;
  handleUpdatePost: () => Promise<void>;
  handleDecline: () => void;
};

export function useEditPost({
  onCloseAction,
  MAX_SYMBOL_COUNT,
  post,
}: PropsHookEditPost): HookEditPost {
  const [description, setDescription] = useState(post.description);
  const [originalDescription] = useState(post.description); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  const editPostRef = useRef<HTMLDivElement>(null);
  const [openConfirmClose, setOpenConfirmClose] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [updatePost] = useUpdatePostMutation();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const userId = useSelector(
    (state: RootState) => authApi.endpoints.getMe.select()(state).data?.userId
  );
  const isAuthenticated = !!userId;

  const handleChange = (text: string): void => {
    if (text.length <= MAX_SYMBOL_COUNT) {
      setDescription(text);
    }
  };

  const confirmChange = useCallback((): void => {
    const hasChanges = description !== originalDescription;
    if (!hasChanges) {
      onCloseAction();
    } else {
      setOpenConfirmClose(true);
    }
  }, [description, originalDescription, onCloseAction]);

  const handleAccept = (): void => {
    setOpenConfirmClose(false);
    onCloseAction();
  };

  const handleDecline = (): void => {
    setOpenConfirmClose(false);
  };

  const handleUpdatePost = async (): Promise<void> => {
    if (isUpdating) {
      return;
    } // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏

    console.log('üîÑ [UPDATE POST] Starting update process', {
      postId: post.id,
      originalDescription: originalDescription,
      newDescription: description,
      hasChanges: description !== originalDescription,
      isAuthenticated,
      timestamp: new Date().toISOString(),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!isAuthenticated) {
      console.warn(
        '‚ö†Ô∏è [UPDATE POST] User not authenticated, cannot update post'
      );
      alert('You need to be logged in to update posts.');
      return;
    }

    setIsUpdating(true);
    try {
      console.log('üì§ [UPDATE POST] Sending API request...');
      const result = await updatePost({
        postId: post.id,
        description,
      }).unwrap();

      console.log('‚úÖ [UPDATE POST] API request successful', {
        result,
        postId: post.id,
        updatedDescription: description,
        isAuthenticated,
        timestamp: new Date().toISOString(),
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      alert('Post updated successfully!');

      console.log('üîí [UPDATE POST] Closing modal...');
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
      onCloseAction();

      console.log('‚úÖ [UPDATE POST] Update process completed successfully');
    } catch (error: any) {
      console.error('‚ùå [UPDATE POST] Failed to update post:', {
        error,
        postId: post.id,
        description,
        isAuthenticated,
        errorData: error?.data,
        errorMessage: error?.message,
        timestamp: new Date().toISOString(),
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage =
        error?.data?.message ||
        error?.message ||
        'Failed to update post. Please try again.';

      alert(errorMessage);
    } finally {
      setIsUpdating(false);
      console.log(
        'üèÅ [UPDATE POST] Finally block executed, isUpdating set to false'
      );
    }
  };

  const handleClickOutside = useCallback(
    (event: MouseEvent): void => {
      if (
        editPostRef.current &&
        !editPostRef.current.contains(event.target as Node)
      ) {
        confirmChange();
      }
    },
    [confirmChange]
  );

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return (): void => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [handleClickOutside]);

  return {
    editPostRef,
    description,
    openConfirmClose,
    setOpenConfirmClose,
    confirmChange,
    handleAccept,
    handleUpdatePost,
    handleDecline,
    isUpdating,
    handleChange,
  };
}
