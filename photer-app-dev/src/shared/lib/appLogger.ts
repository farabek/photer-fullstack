export interface LogData {
  [key: string]: any;
}

export interface LogEntry {
  timestamp: string;
  component: string;
  action: string;
  data?: LogData;
  level: 'info' | 'warn' | 'error' | 'debug';
}

class AppLogger {
  private logs: LogEntry[] = [];
  private isEnabled = false; // ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
  private logCounts: Map<string, number> = new Map(); // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
  private maxLogsPerType = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ª–æ–≥–æ–≤

  enable() {
    this.isEnabled = true;
    console.log('üîç AppLogger: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–û');
  }

  disable() {
    this.isEnabled = false;
    console.log('üîç AppLogger: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –û–¢–ö–õ–Æ–ß–ï–ù–û');
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  toggle() {
    this.isEnabled = !this.isEnabled;
    console.log(
      `üîç AppLogger: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ${this.isEnabled ? '–í–ö–õ–Æ–ß–ï–ù–û' : '–û–¢–ö–õ–Æ–ß–ï–ù–û'}`
    );
    return this.isEnabled;
  }

  private createLogEntry(
    component: string,
    action: string,
    data?: LogData,
    level: LogEntry['level'] = 'info'
  ): LogEntry {
    return {
      timestamp: new Date().toISOString(),
      component,
      action,
      data,
      level,
    };
  }

  private log(entry: LogEntry) {
    if (!this.isEnabled) return;

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ª–æ–≥–æ–≤
    const logKey = `${entry.component}_${entry.action}`;
    const currentCount = this.logCounts.get(logKey) || 0;

    if (currentCount >= this.maxLogsPerType) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
      if (currentCount === this.maxLogsPerType) {
        console.warn(
          `üîç ‚ö†Ô∏è –õ–æ–≥ "${logKey}" –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ ${this.maxLogsPerType}. –î–∞–ª—å–Ω–µ–π—à–∏–µ –ª–æ–≥–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.`
        );
        this.logCounts.set(logKey, currentCount + 1);
      }
      return;
    }

    this.logCounts.set(logKey, currentCount + 1);
    this.logs.push(entry);

    const prefix = `üîç [${entry.component}] ${entry.action}`;
    const style = this.getConsoleStyle(entry.level);

    if (entry.data) {
      console.groupCollapsed(`%c${prefix}`, style);
      console.log('Timestamp:', entry.timestamp);
      console.log('Data:', entry.data);
      console.log(`Count: ${currentCount + 1}/${this.maxLogsPerType}`);
      console.groupEnd();
    } else {
      console.log(
        `%c${prefix}`,
        style,
        entry.timestamp,
        `(${currentCount + 1}/${this.maxLogsPerType})`
      );
    }
  }

  private getConsoleStyle(level: LogEntry['level']): string {
    const styles = {
      info: 'color: #2196F3; font-weight: bold;',
      warn: 'color: #FF9800; font-weight: bold;',
      error: 'color: #F44336; font-weight: bold;',
      debug: 'color: #9C27B0; font-weight: bold;',
    };
    return styles[level];
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  info(component: string, action: string, data?: LogData) {
    this.log(this.createLogEntry(component, action, data, 'info'));
  }

  warn(component: string, action: string, data?: LogData) {
    this.log(this.createLogEntry(component, action, data, 'warn'));
  }

  error(component: string, action: string, data?: LogData) {
    this.log(this.createLogEntry(component, action, data, 'error'));
  }

  debug(component: string, action: string, data?: LogData) {
    this.log(this.createLogEntry(component, action, data, 'debug'));
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  auth(action: string, data?: LogData) {
    this.info('AUTH', action, data);
  }

  sidebar(action: string, data?: LogData) {
    this.info('SIDEBAR', action, data);
  }

  profileSettings(action: string, data?: LogData) {
    this.info('PROFILE_SETTINGS', action, data);
  }

  rtk(action: string, data?: LogData) {
    this.debug('RTK_QUERY', action, data);
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getLogs(): LogEntry[] {
    return [...this.logs];
  }

  clearLogs() {
    this.logs = [];
    this.logCounts.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    console.clear();
    console.log('üîç AppLogger: –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  exportLogs(): string {
    return JSON.stringify(this.logs, null, 2);
  }

  getLogsByComponent(component: string): LogEntry[] {
    return this.logs.filter((log) => log.component === component);
  }

  getLogsByTimeRange(from: Date, to: Date): LogEntry[] {
    return this.logs.filter((log) => {
      const logDate = new Date(log.timestamp);
      return logDate >= from && logDate <= to;
    });
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å Profile Settings
  trackProfileSettingsBug() {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ
    this.clearLogs();

    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.enable();

    console.group('üêõ Profile Settings Bug Tracking');
    console.log('='.repeat(50));
    console.log('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Profile Settings');
    console.log('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toISOString());
    console.log('üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–û');
    console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ appLogger.stop() –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    console.log('='.repeat(50));
    console.groupEnd();
  }

  // –ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  stop() {
    this.disable();
    console.log('üõë AppLogger: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –û–°–¢–ê–ù–û–í–õ–ï–ù–û');
    return '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
  }

  // –°—Ç–∞—Ç—É—Å –ª–æ–≥–≥–µ—Ä–∞
  status() {
    console.log('üîç AppLogger Status:');
    console.log('- Enabled:', this.isEnabled);
    console.log('- Total logs:', this.logs.length);
    console.log('- Log counts:', Object.fromEntries(this.logCounts));
    console.log('- Max logs per type:', this.maxLogsPerType);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ –ª–æ–≥–æ–≤
  setMaxLogsPerType(max: number) {
    this.maxLogsPerType = max;
    console.log(`üîç AppLogger: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç ${max} –ª–æ–≥–æ–≤ –Ω–∞ —Ç–∏–ø`);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const appLogger = new AppLogger();

// –î–µ–ª–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).appLogger = appLogger;
}
