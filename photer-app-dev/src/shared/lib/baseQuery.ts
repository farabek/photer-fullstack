'use client';
import { fetchBaseQuery } from '@reduxjs/toolkit/query';
import type {
  BaseQueryFn,
  FetchArgs,
  FetchBaseQueryError,
} from '@reduxjs/toolkit/query';

import { Mutex } from 'async-mutex';
import { getCookie, deleteCookie } from './cookies';

/**
 * Mutex –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö refresh token –∑–∞–ø—Ä–æ—Å–æ–≤
 * –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race conditions –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
 */
const mutex = new Mutex();

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
 * - accessToken: –æ–±—ã—á–Ω—ã–π cookie (–Ω–µ httpOnly) - JavaScript –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Authorization header
 * - refreshToken: httpOnly cookie - –∑–∞—â–∏—â–µ–Ω –æ—Ç XSS –∞—Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 *
 * –ü–æ—á–µ–º—É accessToken –Ω–µ httpOnly:
 * 1. JavaScript –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Authorization header
 * 2. –ë–µ–∑ —ç—Ç–æ–≥–æ –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 401 Unauthorized
 * 3. –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ (60 —Å–µ–∫) + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
 */
const getBaseUrl = () => {
  // –í dev –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ /api/* –Ω–∞ next.config.ts (–æ–¥–∏–Ω origin: 3000)
  if (process.env.NODE_ENV === 'development') {
    return '/api/v1';
  }

  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  return process.env.NEXT_PUBLIC_BASE_URL || 'https://photer.ltd/api/v1';
};

/**
 * –ë–∞–∑–æ–≤—ã–π query –¥–ª—è RTK Query —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 *
 * –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - credentials: 'include' - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç cookies —Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
 * - prepareHeaders - –¥–æ–±–∞–≤–ª—è–µ—Ç Authorization header —Å accessToken –∏–∑ cookie
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SSR - cookies –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, —Ç–∞–∫ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
const baseQuery = fetchBaseQuery({
  baseUrl: getBaseUrl(),
  credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ cookies
  prepareHeaders: (headers) => {
    // –ü–æ–ª—É—á–∞–µ–º accessToken –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ cookie (–Ω–µ httpOnly)
    // JavaScript –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Authorization header
    const token = getCookie('accessToken');
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }
    return headers;
  },
});

// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('baseQuery configured with baseUrl:', getBaseUrl());

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π baseQuery —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
 *
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * 1. –î–µ–ª–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
 * 2. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç 401 (—Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫):
 *    - –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ /auth/refresh-token
 *    - refreshToken –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ httpOnly cookie
 *    - –ù–æ–≤—ã–π accessToken —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã–π cookie
 *    - –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
 * 3. –ï—Å–ª–∏ refresh –Ω–µ —É–¥–∞–ª—Å—è - –æ—á–∏—â–∞–µ—Ç cookies (logout)
 *
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
 * - refreshToken –≤ httpOnly cookie –∑–∞—â–∏—â–µ–Ω –æ—Ç XSS
 * - accessToken –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ (60 —Å–µ–∫)
 * - Mutex –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç race conditions
 */
export const baseQueryWithReauth: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  // –ñ–¥–µ–º, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã
  await mutex.waitForUnlock();

  console.log('üîÑ [BASE_QUERY] Starting request:', {
    url: typeof args === 'string' ? args : args.url,
    method: typeof args === 'string' ? 'GET' : args.method || 'GET',
    hasAccessToken: !!getCookie('accessToken'),
    hasRefreshToken: !!getCookie('refreshToken'),
    timestamp: new Date().toISOString(),
  });

  let result = await baseQuery(args, api, extraOptions);

  // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 (—Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)
  if (result.error && result.error.status === 401) {
    console.log('üîê 401 Error detected, attempting token refresh:', {
      url: typeof args === 'string' ? args : args.url,
      timestamp: new Date().toISOString(),
      error: result.error,
    });
    if (!mutex.isLocked()) {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const release = await mutex.acquire();
      try {
        console.log('üîÑ [REFRESH] Starting token refresh process');
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        // refreshToken –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ httpOnly cookie
        const refreshResult = await baseQuery(
          {
            url: '/auth/refresh-token',
            method: 'POST',
          },
          api,
          extraOptions
        );

        console.log('üîÑ [REFRESH] Refresh result:', {
          hasData: !!refreshResult.data,
          hasError: !!refreshResult.error,
          errorStatus: refreshResult.error?.status,
          timestamp: new Date().toISOString(),
        });

        if (refreshResult.data) {
          console.log('‚úÖ Token refresh successful, retrying original request');
          // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã
          // –ù–æ–≤—ã–π accessToken –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –æ–±—ã—á–Ω—ã–π cookie –æ—Ç backend
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          result = await baseQuery(args, api, extraOptions);
          console.log('‚úÖ [REFRESH] Original request after refresh:', {
            success: !result.error,
            error: result.error,
            timestamp: new Date().toISOString(),
          });
        } else {
          console.log('‚ùå Token refresh failed (no data), clearing cookies:', {
            refreshError: refreshResult.error,
            hasAccessTokenBefore: !!getCookie('accessToken'),
            hasRefreshTokenBefore: !!getCookie('refreshToken'),
            timestamp: new Date().toISOString(),
          });
          // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (refreshToken –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)
          deleteCookie('accessToken');
          deleteCookie('refreshToken');
          console.log('üßπ Cookies cleared, dispatching invalidateTags');
          api.dispatch({
            type: 'baseApi/invalidateTags',
            payload: ['me'],
          });
          // üÜï [UPDATE 1]: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ä–µ–¥–∏—Ä–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç refresh)
          if (typeof window !== 'undefined' && !mutex.isLocked()) {
            alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
            window.location.href = '/sign-in';
          }
        }

        // üÜï [UPDATE 2]: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ refresh 401 ‚Üí –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (refreshResult.error && refreshResult.error.status === 401) {
          console.log('‚õî Refresh token expired ‚Üí force logout');
          deleteCookie('accessToken');
          deleteCookie('refreshToken');
          api.dispatch({ type: 'baseApi/invalidateTags', payload: ['me'] });

          // üÜï [UPDATE 3]: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ä–µ–¥–∏—Ä–µ–∫—Ç
          if (typeof window !== 'undefined') {
            alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
            window.location.href = '/sign-in';
          }

          return { error: refreshResult.error };
        }
      } finally {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        release();
        console.log('üîÑ [REFRESH] Mutex released');
      }
    } else {
      // –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∂–¥–µ–º
      console.log('üîÑ [REFRESH] Another request is refreshing, waiting...');
      await mutex.waitForUnlock();
      console.log('üîÑ [REFRESH] Mutex unlocked, retrying original request');
      result = await baseQuery(args, api, extraOptions);
      console.log('‚úÖ [REFRESH] Original request after waiting:', {
        success: !result.error,
        error: result.error,
        timestamp: new Date().toISOString(),
      });
    }
  }

  console.log('üîÑ [BASE_QUERY] Final result:', {
    url: typeof args === 'string' ? args : args.url,
    success: !result.error,
    error: result.error,
    timestamp: new Date().toISOString(),
  });

  return result;
};
